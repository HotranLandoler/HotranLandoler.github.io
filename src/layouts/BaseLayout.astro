---
import { getCurrentTranslations, getLocaleFromUrl } from '~/i18n';
import '../styles/global.scss';
import '@fontsource-variable/noto-sans-sc';

import MainHeader from '~/components/MainHeader.astro';
import MainFooter from '~/components/MainFooter.astro';
import HeadHrefLangs from '~/components/HeadHrefLangs.astro';

export interface Props {
  title: string;
}

const { title } = Astro.props;

const currentLanguage = getLocaleFromUrl(Astro.url.pathname);
const t = getCurrentTranslations(Astro.params);
---

<!doctype html>
<html lang={currentLanguage}>
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={t.site.description} />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <HeadHrefLangs />
    <!-- <ViewTransitions /> -->
    <title>{t.site.title} | {title}</title>
  </head>
  <body>
    <MainHeader />
    <slot />
    <MainFooter />
    <script lang="ts">
      const heroSec = document.querySelector('.hero-section');

      if (heroSec) {
        const observer = new IntersectionObserver(
          (entries) => {
            const entry = entries[0];
            if (!entry.isIntersecting) {
              document.body.classList.add('sticky');
            } else {
              document.body.classList.remove('sticky');
            }
          },
          {
            root: null,
            threshold: 0,
            rootMargin: '-64px',
          },
        );
        observer.observe(heroSec);
      } else {
        document.body.classList.add('sticky');
      }
    </script>
  </body>
</html>
